{"version":3,"file":"index.js","sources":["../src/store.tsx"],"sourcesContent":["import React, { FC, createContext, useReducer, useContext, useCallback, Component } from 'react'\n\ntype Payload<D> = {\n  [P in keyof D]?: D[P];\n}\n\n// dispatch\nexport type IDispatch<D> = (type: string, payload: Payload<D>) => void\n\n// 状态库入参 泛型入参\ninterface IStore<S, D> {\n  state: S\n  reducers: IReducer<S, D>,\n  effects: IEffect<D>\n}\n\n// reducer方法\ninterface IReducer<S, D> {\n  [key: string]: (state: S, data?: Payload<D>) => S\n}\n\n// effects方法\ninterface IEffect<D> {\n  [key: string]: (data?: Payload<D>, dispatch?: IDispatch<D>) => void\n}\n\ninterface IAction<D> {\n  type: string // action名\n  payload: Payload<D>\n}\n\ninterface IContextWidthDispatch<D> {\n  dispatch: IDispatch<D>\n}\n\ninterface IContext<S> {\n  [key: string]: S\n}\n\nconst Store = <S, D>(namespace: string, props: IStore<S, D>) => {\n  const { state, reducers, effects } = props\n\n  const Context = createContext<IContext<S> | IContextWidthDispatch<D> | null>(null)\n\n  const Provider: FC = ({ children }) => {\n    const [providerState, dispatch] = useReducer((state: S, action: IAction<D>) => {\n      const { type, payload } = action\n      if (reducers && reducers.hasOwnProperty(type)) {\n        // 自己包装的reducers\n        return reducers[type](state, payload)\n      }\n      return state\n    }, state)\n\n    // effect中的dispatch\n    const effectDispatch: IDispatch<D> = (type, payload) => {\n      dispatch({ type, payload })\n    }\n\n    // 包装dispatch\n    const _dispatch = useCallback<IDispatch<D>>((type, payload) => {\n      if (effects && effects.hasOwnProperty(type)) {\n        effects[type].call(null, payload, effectDispatch)\n      } else if (reducers && reducers.hasOwnProperty(type)) {\n        dispatch({ type, payload })\n      }\n    }, [])\n\n    return <Context.Provider value={{ [namespace]: providerState, dispatch: _dispatch }}>{children}</Context.Provider>\n  }\n\n  const connect = (Component: any) => {\n    const NewComponent = (props: any) => {\n      const context = useContext(Context)\n      const newProps = { ...props, ...context }\n      return <Component {...newProps} />\n    }\n    return NewComponent\n  }\n\n  // 返回值\n  return {\n    Provider,\n    Context,\n    connect,\n  }\n}\n\nexport default Store\n"],"names":["namespace","props","state","reducers","effects","Context","createContext","Provider","_a","children","_c","useReducer","action","type","payload","hasOwnProperty","providerState","dispatch","effectDispatch","_dispatch","useCallback","call","React","value","_b","connect","Component","context","useContext","newProps"],"mappings":"0IAuCc,SAAOA,EAAmBC,OAC9BC,EAA6BD,QAAtBE,EAAsBF,WAAZG,EAAYH,UAE/BI,EAAUC,EAA6D,YAuCtE,CACLC,SAtCmB,SAACC,SAAEC,aAChBC,EAA4BC,GAAW,SAACT,EAAUU,OAC9CC,EAAkBD,OAAZE,EAAYF,iBACtBT,GAAYA,EAASY,eAAeF,GAE/BV,EAASU,GAAMX,EAAOY,GAExBZ,IACNA,GAPIc,OAAeC,OAUhBC,EAA+B,SAACL,EAAMC,GAC1CG,EAAS,CAAEJ,OAAMC,aAIbK,EAAYC,GAA0B,SAACP,EAAMC,GAC7CV,GAAWA,EAAQW,eAAeF,GACpCT,EAAQS,GAAMQ,KAAK,KAAMP,EAASI,GACzBf,GAAYA,EAASY,eAAeF,IAC7CI,EAAS,CAAEJ,OAAMC,cAElB,WAEIQ,gBAACjB,EAAQE,UAASgB,YAASC,EAACxB,GAAYgB,EAAeQ,WAAUL,MAAcV,IAetFJ,UACAoB,QAbc,SAACC,UACM,SAACzB,OACd0B,EAAUC,EAAWvB,GACrBwB,SAAgB5B,GAAU0B,UACzBL,gBAACI,OAAcG"}